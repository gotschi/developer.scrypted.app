---
title: Scrypted API Reference

language_tabs: # must be one of https://git.io/vQNgJ
  - javascript
  - typescript

search: true
---
<%= partial "includes/GettingStarted.md.erb" %>

<%= partial "includes/Concepts.md.erb" %>

<%= partial "includes/SDK.md.erb" %>



# Core Reference


## ScryptedDevice


> Definition

```javascript
interface ScryptedDevice  {
  events(): string[];
  id(): string;
  interfaces(): string[];
  name(): string;
  on(event: string, callback: (eventSource: ScryptedDevice, eventInterface: string, eventData: object) => void): EventListenerRegister;
  type(): ScryptedDeviceType;
  watch(event: string, callback: (eventSource: ScryptedDevice, eventInterface: string, eventData: object) => void): EventListenerRegister;
}
```


<%= partial "includes/scrypted/ScryptedDevice.md.erb" %>


<aside class="notice">
All devices in Scrypted implement ScryptedDevice, which contains the id, name, and type. Add listeners to subscribe to events from that device.
</aside>





### events
string[] events()



### id
string id()



### interfaces
string[] interfaces()



### name
string name()



### on
<a href='#eventlistenerregister'>EventListenerRegister</a> on(string event, <a href='#eventlistener'>EventListener</a> callback)

Subscribe to events from a specific interface on a device, such as 'OnOff' or 'Brightness'.
The callback function has the signature function(eventSource, eventData).
The eventSource is the interface from where the event originated, and eventData will contain data specific
to that type of interface. OnOff would be boolean, while Brightness would be an integer between 0 and 100.

### type
ScryptedDeviceType type()



### watch
<a href='#eventlistenerregister'>EventListenerRegister</a> watch(string event, <a href='#eventlistener'>EventListener</a> callback)

Similar to 'on', but will passively watch for events, and not initiate polling.









## ScryptedDeviceType


```javascript
enum ScryptedDeviceType {
  Builtin = "Builtin",
  Camera = "Camera",
  Fan = "Fan",
  Light = "Light",
  Switch = "Switch",
  Outlet = "Outlet",
  Sensor = "Sensor",
  Scene = "Scene",
  Program = "Program",
  Automation = "Automation",
  Vacuum = "Vacuum",
  Notifier = "Notifier",
  Thermostat = "Thermostat",
  Lock = "Lock",
  PasswordControl = "PasswordControl",
  Display = "Display",
  Speaker = "Speaker",
  Event = "Event",
  Entry = "Entry",
  DeviceProvider = "DeviceProvider",
  DataSource = "DataSource",
  API = "API",
  Unknown = "Unknown",
}
```


<%= partial "includes/scrypted/ScryptedDeviceType.md.erb" %>








Enum |
----
"Builtin" |
"Camera" |
"Fan" |
"Light" |
"Switch" |
"Outlet" |
"Sensor" |
"Scene" |
"Program" |
"Automation" |
"Vacuum" |
"Notifier" |
"Thermostat" |
"Lock" |
"PasswordControl" |
"Display" |
"Speaker" |
"Event" |
"Entry" |
"DeviceProvider" |
"DataSource" |
"API" |
"Unknown" |




## EventListener


> Definition

```javascript
interface EventListener  {
  onEvent(eventSource: ScryptedDevice, eventInterface: string, eventData: object): void;
}
```


<%= partial "includes/scrypted/EventListener.md.erb" %>






### onEvent
void onEvent(ScryptedDevice eventSource, string eventInterface, object eventData)

This device type can be hooked by Automation actions to handle events. The event source, event type (interface), and event data are all passed to the listener as arguments.









## EventListenerRegister


> Definition

```javascript
interface EventListenerRegister  {
  getListener(): EventListener;
  removeListener(): void;
}
```


<%= partial "includes/scrypted/EventListenerRegister.md.erb" %>


<aside class="notice">
Returned when an event listener is attached to an EventEmitter. Call removeListener to unregister from events.
</aside>





### getListener
<a href='#eventlistener'>EventListener</a> getListener()



### removeListener
void removeListener()














# Device Reference


## DeviceManager


> Definition

```javascript
interface DeviceManager  {
  getDeviceById(id: string): ScryptedDevice;
  getDeviceByName(name: string): ScryptedDevice;
  onDeviceDiscovered(device: Device): void;
  onDeviceEvent(eventInterface: string, eventData: object): void;
  onDeviceEvent(id: string, eventInterface: string, eventData: object): void;
  onDevicesChanged(devices: DeviceManifest): void;
}
```


<%= partial "includes/scrypted/DeviceManager.md.erb" %>


<aside class="notice">
DeviceManager is the interface which plugins use to report devices and device events to Scrypted. It is also used to query Scrypted for other devices.
</aside>





### getDeviceById
ScryptedDevice getDeviceById(string id)

Find a Scrypted device by id.

### getDeviceByName
ScryptedDevice getDeviceByName(string name)

Find a Scrypted device by name.

### onDeviceDiscovered
void onDeviceDiscovered(Device device)

onDeviceDiscovered is used to report new devices that are trickle discovered, one by one, such as via a network broadcast.

### onDeviceEvent
void onDeviceEvent(string eventInterface, object eventData)

Fire an event for this plugin's device.

### onDeviceEvent
void onDeviceEvent(string id, string eventInterface, object eventData)

Fire an event for a device provided by this plugin.

### onDevicesChanged
void onDevicesChanged(DeviceManifest devices)

onDevicesChanged is used to sync Scrypted with devices that are attached to a hub, such as Hue or SmartThings. All the devices should be reported at once.









## DeviceProvider


> Definition

```javascript
interface DeviceProvider  {
  discoverDevices(duration: number): void;
  getDevice(id: string): object;
}
```


<%= partial "includes/scrypted/DeviceProvider.md.erb" %>


<aside class="notice">
DeviceProvider acts as a controller/hub and exposes multiple devices to Scrypted Device Manager.
</aside>





### discoverDevices
void discoverDevices(number duration)

Initiate device discovery for the specified duration.

### getDevice
object getDevice(string id)

Get an instance of a previously discovered device that was reported to the device manager.









## DeviceManifest


> Definition

```javascript
interface DeviceManifest  {
  devices: Device[];
}
```


<%= partial "includes/scrypted/DeviceManifest.md.erb" %>


<aside class="notice">
DeviceManifest is passed to DeviceManager.onDevicesChanged to sync a full list of devices from the controller/hub (Hue, SmartThings, etc)
</aside>





### Properties
Name      | Type
--------- | ----
devices | <a href='#device'>Device</a>[]






## Device


> Definition

```javascript
interface Device  {
  events: string[];
  id: string;
  interfaces: string[];
  model: string;
  name: string;
  room: string;
  type: ScryptedDeviceType;
}
```


<%= partial "includes/scrypted/Device.md.erb" %>


<aside class="notice">
Device objects are created by DeviceProviders when new devices are discover and synced to Scrypted via the DeviceManager.
</aside>





### Properties
Name      | Type
--------- | ----
events | string[]
id | string
interfaces | string[]
model | string
name | string
room | string
type | ScryptedDeviceType






## Refresh


> Definition

```javascript
interface Refresh  {
  getRefreshFrequency(): number;
  refresh(refreshInterface: string, userInitiated: boolean): void;
}
```


<%= partial "includes/scrypted/Refresh.md.erb" %>


<aside class="notice">
Refresh indicates that this device has properties that are not automatically updated, and must be periodically refreshed.
</aside>





### getRefreshFrequency
number getRefreshFrequency()

Get the recommended refresh/poll frequency in seconds for this device.

### refresh
void refresh(string refreshInterface, boolean userInitiated)

This method is called by Scrypted when the properties of the device need to be refreshed. When the device has completed the refresh, the appropriate events should be emitted. The parameters provide the specific interface that needs to be refreshed and whether it was user initiated (via UI or voice).












# Interface Reference


## OnOff


> Definition

```javascript
interface OnOff  {
  isOn(): boolean;
  turnOff(): void;
  turnOn(): void;
}
```


<%= partial "includes/scrypted/OnOff.md.erb" %>


<aside class="notice">
OnOff is a basic binary switch.
</aside>





### isOn
boolean isOn()



### turnOff
void turnOff()



### turnOn
void turnOn()











## Brightness


> Definition

```javascript
interface Brightness  {
  getLevel(): number;
  setLevel(brightness: number): void;
}
```


<%= partial "includes/scrypted/Brightness.md.erb" %>


<aside class="notice">
Brightness is a lighting device that can be dimmed/lit between 0 to 100.
</aside>





### getLevel
number getLevel()



### setLevel
void setLevel(number brightness)











## ColorSettingTemperature


> Definition

```javascript
interface ColorSettingTemperature  {
  getTemperature(): number;
  getTemperatureMaxK(): number;
  getTemperatureMinK(): number;
  setTemperature(kelvin: number): void;
}
```


<%= partial "includes/scrypted/ColorSettingTemperature.md.erb" %>


<aside class="notice">
ColorSettingTemperature sets the color temperature of a light in Kelvin.
</aside>





### getTemperature
number getTemperature()



### getTemperatureMaxK
number getTemperatureMaxK()



### getTemperatureMinK
number getTemperatureMinK()



### setTemperature
void setTemperature(number kelvin)











## ColorSettingRgb


> Definition

```javascript
interface ColorSettingRgb  {
  getRgb(): ColorRgb;
  setRgb(r: number, g: number, b: number): void;
}
```


<%= partial "includes/scrypted/ColorSettingRgb.md.erb" %>


<aside class="notice">
ColorSettingRgb sets the color of a colored light using the RGB representation.
</aside>





### getRgb
<a href='#colorrgb'>ColorRgb</a> getRgb()



### setRgb
void setRgb(number r, number g, number b)











## ColorRgb


> Definition

```javascript
interface ColorRgb  {
  toString(): string;
  b: number;
  g: number;
  r: number;
}
```


<%= partial "includes/scrypted/ColorRgb.md.erb" %>


<aside class="notice">
Represents an RGB color value component values between 0 and 255.
</aside>





### toString
string toString()







### Properties
Name      | Type
--------- | ----
b | number
g | number
r | number






## ColorSettingHsv


> Definition

```javascript
interface ColorSettingHsv  {
  getHsv(): ColorHsv;
  setHsv(hue: number, saturation: number, value: number): void;
}
```


<%= partial "includes/scrypted/ColorSettingHsv.md.erb" %>


<aside class="notice">
ColorSettingHsv sets the color of a colored light using the HSV representation.
</aside>





### getHsv
<a href='#colorhsv'>ColorHsv</a> getHsv()



### setHsv
void setHsv(number hue, number saturation, number value)











## ColorHsv


> Definition

```javascript
interface ColorHsv  {
  toString(): string;
  h: number;
  s: number;
  v: number;
}
```


<%= partial "includes/scrypted/ColorHsv.md.erb" %>


<aside class="notice">
Represents an HSV color value component values between 0 and 1.
</aside>





### toString
string toString()







### Properties
Name      | Type
--------- | ----
h | number
s | number
v | number






## Notifier


> Definition

```javascript
interface Notifier  {
  sendNotification(title: string, body: string): void;
  sendNotification(title: string, body: string, media: MediaObject, mimeType: string): void;
}
```


<%= partial "includes/scrypted/Notifier.md.erb" %>


<aside class="notice">
Notifier can be any endpoint that can receive messages, such as speakers, phone numbers, messaging clients, etc. The messages may optionally contain media.
</aside>





### sendNotification
void sendNotification(string title, string body)



### sendNotification
void sendNotification(string title, string body, MediaObject media, string mimeType)

If a the media parameter is supplied, the mime type denotes how to send the media within notification. For example, specify 'image/*' to send a video MediaObject as an image.
Passing null uses the native type of the MediaObject. If that is not supported by the notifier, the media will be converted to a compatible type.









## MediaObject


> Definition

```javascript
interface MediaObject  {
  getMimeType(): string;
}
```


<%= partial "includes/scrypted/MediaObject.md.erb" %>


<aside class="notice">
MediaObject is an intermediate object within Scrypted to represent all media objects. Plugins should use the MediaConverter to convert the Scrypted MediaObject into a desired type, whether it is a externally accessible URL, a Buffer, etc.
</aside>





### getMimeType
string getMimeType()











## StartStop


> Definition

```javascript
interface StartStop  {
  isPausable(): boolean;
  isPaused(): boolean;
  isRunning(): boolean;
  pause(): void;
  resume(): void;
  start(): void;
  stop(): void;
}
```


<%= partial "includes/scrypted/StartStop.md.erb" %>


<aside class="notice">
StartStop represents a device that can be started, stopped, and possibly paused and resumed. Typically vacuum cleaners or washers.
</aside>





### isPausable
boolean isPausable()



### isPaused
boolean isPaused()



### isRunning
boolean isRunning()



### pause
void pause()



### resume
void resume()



### start
void start()



### stop
void stop()











## Dock


> Definition

```javascript
interface Dock  {
  dock(): void;
  isDocked(): boolean;
}
```


<%= partial "includes/scrypted/Dock.md.erb" %>


<aside class="notice">
Dock instructs devices that have a base station or charger, to return to their home.
</aside>





### dock
void dock()



### isDocked
boolean isDocked()











## TemperatureSetting


> Definition

```javascript
interface TemperatureSetting implements Thermometer, HumiditySensor {
  getAvailableThermostatModes(): ThermostatMode[];
  getTemperatureSetpoint(): number;
  getTemperatureSetpointHigh(): number;
  getTemperatureSetpointLow(): number;
  getThermostatMode(): ThermostatMode;
  setTemperatureSetRange(low: number, high: number): void;
  setTemperatureSetpoint(degrees: number): void;
  setThermostatMode(mode: ThermostatMode): void;
}
```


<%= partial "includes/scrypted/TemperatureSetting.md.erb" %>


<aside class="notice">
TemperatureSetting represents a thermostat device.
</aside>





### getAvailableThermostatModes
<a href='#thermostatmode'>ThermostatMode</a>[] getAvailableThermostatModes()



### getTemperatureSetpoint
number getTemperatureSetpoint()



### getTemperatureSetpointHigh
number getTemperatureSetpointHigh()



### getTemperatureSetpointLow
number getTemperatureSetpointLow()



### getThermostatMode
<a href='#thermostatmode'>ThermostatMode</a> getThermostatMode()



### setTemperatureSetRange
void setTemperatureSetRange(number low, number high)



### setTemperatureSetpoint
void setTemperatureSetpoint(number degrees)



### setThermostatMode
void setThermostatMode(ThermostatMode mode)











## Thermometer


> Definition

```javascript
interface Thermometer  {
  getTemperatureAmbient(): number;
  getTemperatureUnit(): TemperatureUnit;
}
```


<%= partial "includes/scrypted/Thermometer.md.erb" %>






### getTemperatureAmbient
number getTemperatureAmbient()

Get the ambient temperature in Celsius.

### getTemperatureUnit
<a href='#temperatureunit'>TemperatureUnit</a> getTemperatureUnit()

Get the user facing unit of measurement for this thermometer. This may be Fahrenheit, but getTemperatureAmbient will return results in Celsius.









## TemperatureUnit


```javascript
enum TemperatureUnit {
  C = "C",
  F = "F",
}
```


<%= partial "includes/scrypted/TemperatureUnit.md.erb" %>








Enum |
----
"C" |
"F" |




## HumiditySensor


> Definition

```javascript
interface HumiditySensor  {
  getHumidityAmbient(): number;
}
```


<%= partial "includes/scrypted/HumiditySensor.md.erb" %>






### getHumidityAmbient
number getHumidityAmbient()











## ThermostatMode


```javascript
enum ThermostatMode {
  Off = "Off",
  Cool = "Cool",
  Heat = "Heat",
  HeatCool = "HeatCool",
  Auto = "Auto",
  FanOnly = "FanOnly",
  Purifier = "Purifier",
  Eco = "Eco",
  Dry = "Dry",
  On = "On",
}
```


<%= partial "includes/scrypted/ThermostatMode.md.erb" %>








Enum |
----
"Off" |
"Cool" |
"Heat" |
"HeatCool" |
"Auto" |
"FanOnly" |
"Purifier" |
"Eco" |
"Dry" |
"On" |




## Camera


> Definition

```javascript
interface Camera  {
  takePicture(): MediaObject;
}
```


<%= partial "includes/scrypted/Camera.md.erb" %>


<aside class="notice">
Camera devices can take still photos.
</aside>





### takePicture
<a href='#mediaobject'>MediaObject</a> takePicture()











## CameraStream


> Definition

```javascript
interface CameraStream  {
  createVideoCapturer(): MediaObject;
}
```


<%= partial "includes/scrypted/CameraStream.md.erb" %>


<aside class="notice">
CameraStream devices can capture video streams.
</aside>





### createVideoCapturer
<a href='#mediaobject'>MediaObject</a> createVideoCapturer()











## Lock


> Definition

```javascript
interface Lock  {
  isLocked(): boolean;
  lock(): void;
  unlock(): void;
}
```


<%= partial "includes/scrypted/Lock.md.erb" %>


<aside class="notice">
Lock controls devices that can lock or unlock entries. Often works in tandem with PasswordControl.
</aside>





### isLocked
boolean isLocked()



### lock
void lock()



### unlock
void unlock()











## PasswordControl


> Definition

```javascript
interface PasswordControl  {
  addPassword(password: string): void;
  getPasswords(): string[];
  removePassword(password: string): void;
}
```


<%= partial "includes/scrypted/PasswordControl.md.erb" %>


<aside class="notice">
PasswordControl represents devices that authorize users via a passcode or pin code.
</aside>





### addPassword
void addPassword(string password)



### getPasswords
string[] getPasswords()



### removePassword
void removePassword(string password)











## Scene


> Definition

```javascript
interface Scene  {
  activate(): void;
  deactivate(): void;
  isReversible(): boolean;
}
```


<%= partial "includes/scrypted/Scene.md.erb" %>


<aside class="notice">
Scenes control multiple different devices into a given state.
</aside>





### activate
void activate()



### deactivate
void deactivate()



### isReversible
boolean isReversible()

If a scene can be reversed, isReversible should return true. Otherwise deactivate will not be called.









## Entry


> Definition

```javascript
interface Entry  {
  closeEntry(): void;
  isEntryOpen(): boolean;
  openEntry(): void;
}
```


<%= partial "includes/scrypted/Entry.md.erb" %>


<aside class="notice">
Entry represents devices that can open and close barriers, such as garage doors.
</aside>





### closeEntry
void closeEntry()



### isEntryOpen
boolean isEntryOpen()



### openEntry
void openEntry()











## Alarm


> Definition

```javascript
interface Alarm  {
  getClockType(): ClockType;
  getHour(): number;
  getMinute(): number;
  isEnabled(day: number): boolean;
}
```


<%= partial "includes/scrypted/Alarm.md.erb" %>


<aside class="notice">
Event data from the Scheduler component.
</aside>





### getClockType
<a href='#clocktype'>ClockType</a> getClockType()



### getHour
number getHour()



### getMinute
number getMinute()



### isEnabled
boolean isEnabled(number day)











## ClockType


```javascript
enum ClockType {
  _AM = "_AM",
  _PM = "_PM",
  _24HourClock = "_24HourClock",
  _BeforeSunrise = "_BeforeSunrise",
  _AfterSunrise = "_AfterSunrise",
  _BeforeSunset = "_BeforeSunset",
  _AfterSunset = "_AfterSunset",
}
```


<%= partial "includes/scrypted/ClockType.md.erb" %>








Enum |
----
"_AM" |
"_PM" |
"_24HourClock" |
"_BeforeSunrise" |
"_AfterSunrise" |
"_BeforeSunset" |
"_AfterSunset" |




## Battery


> Definition

```javascript
interface Battery  {
  getBatteryLevel(): number;
}
```


<%= partial "includes/scrypted/Battery.md.erb" %>


<aside class="notice">
Battery retrieves the battery level of battery powered devices.
</aside>





### getBatteryLevel
number getBatteryLevel()











## MediaPlayer


> Definition

```javascript
interface MediaPlayer  {
  load(media: MediaObject, options: MediaPlayerOptions): void;
  load(mediaUrl: string, options: MediaPlayerOptions): void;
  pause(): void;
  play(): void;
  stop(): void;
}
```


<%= partial "includes/scrypted/MediaPlayer.md.erb" %>


<aside class="notice">
MediaPlayer allows media playback on screen or speaker devices, such as Chromecasts or TVs.
</aside>





### load
void load(MediaObject media, MediaPlayerOptions options)



### load
void load(string mediaUrl, MediaPlayerOptions options)



### pause
void pause()



### play
void play()



### stop
void stop()











## MediaPlayerOptions


> Definition

```javascript
interface MediaPlayerOptions  {
  autoplay: boolean;
  mimeType: string;
}
```


<%= partial "includes/scrypted/MediaPlayerOptions.md.erb" %>






### Properties
Name      | Type
--------- | ----
autoplay | boolean
mimeType | string






## FaceDetector



<%= partial "includes/scrypted/FaceDetector.md.erb" %>










## Online


> Definition

```javascript
interface Online  {
  isOnline(): boolean;
}
```


<%= partial "includes/scrypted/Online.md.erb" %>


<aside class="notice">
Online denotes whether the device is online or unresponsive. It may be unresponsive due to being unplugged, network error, etc.
</aside>





### isOnline
boolean isOnline()











## Program


> Definition

```javascript
interface Program  {
  run(args: object[]): object;
  runAsync(args: object[]): object;
}
```


<%= partial "includes/scrypted/Program.md.erb" %>






### run
object run(object[] args)

Synchronously run a script given the provided arguments.

### runAsync
object runAsync(object[] args)

Asynchronously run a script given the provided arguments.









## SoftwareUpdate


> Definition

```javascript
interface SoftwareUpdate  {
  checkForUpdate(): void;
  installUpdate(): void;
  isUpdateAvailable(): boolean;
}
```


<%= partial "includes/scrypted/SoftwareUpdate.md.erb" %>


<aside class="notice">
SoftwareUpdate provides a way to check for updates and install them. This may be a Scrypted Plugin or device firmware.
</aside>





### checkForUpdate
void checkForUpdate()



### installUpdate
void installUpdate()



### isUpdateAvailable
boolean isUpdateAvailable()











## BinarySensor


> Definition

```javascript
interface BinarySensor  {
  getBinaryState(): boolean;
}
```


<%= partial "includes/scrypted/BinarySensor.md.erb" %>






### getBinaryState
boolean getBinaryState()











## EntrySensor


> Definition

```javascript
interface EntrySensor  {
  isEntryOpen(): boolean;
}
```


<%= partial "includes/scrypted/EntrySensor.md.erb" %>






### isEntryOpen
boolean isEntryOpen()











## IntrusionSensor


> Definition

```javascript
interface IntrusionSensor  {
  isIntrusionDetected(): boolean;
}
```


<%= partial "includes/scrypted/IntrusionSensor.md.erb" %>






### isIntrusionDetected
boolean isIntrusionDetected()











## AudioSensor



<%= partial "includes/scrypted/AudioSensor.md.erb" %>










## MotionSensor



<%= partial "includes/scrypted/MotionSensor.md.erb" %>










## OccupancySensor



<%= partial "includes/scrypted/OccupancySensor.md.erb" %>










## EntryHandleSensor


> Definition

```javascript
interface EntryHandleSensor  {
  isDoorOpen(): boolean;
}
```


<%= partial "includes/scrypted/EntryHandleSensor.md.erb" %>






### isDoorOpen
boolean isDoorOpen()











## FloodSensor


> Definition

```javascript
interface FloodSensor  {
  isFlooded(): boolean;
}
```


<%= partial "includes/scrypted/FloodSensor.md.erb" %>






### isFlooded
boolean isFlooded()











## UltravioletSensor


> Definition

```javascript
interface UltravioletSensor  {
  getUltraviolet(): number;
}
```


<%= partial "includes/scrypted/UltravioletSensor.md.erb" %>






### getUltraviolet
number getUltraviolet()











## LuminanceSensor


> Definition

```javascript
interface LuminanceSensor  {
  getLuminance(): number;
}
```


<%= partial "includes/scrypted/LuminanceSensor.md.erb" %>






### getLuminance
number getLuminance()











## Logger


> Definition

```javascript
interface Logger  {
  a(msg: string): void;
  clear(): void;
  clearAlert(msg: string): void;
  clearAlerts(): void;
  d(msg: string): void;
  e(msg: string): void;
  i(msg: string): void;
  v(msg: string): void;
  w(msg: string): void;
}
```


<%= partial "includes/scrypted/Logger.md.erb" %>


<aside class="notice">
Logger is exposed via log.* to allow writing to the Scrypted log.
</aside>





### a
void a(string msg)

Alert. Alert level logs will be displayed as a notification in the management console.

### clear
void clear()

Clear the log

### clearAlert
void clearAlert(string msg)

Clear a specific alert

### clearAlerts
void clearAlerts()

Clear all alerts

### d
void d(string msg)

Debug

### e
void e(string msg)

Error

### i
void i(string msg)

Info

### v
void v(string msg)

Verbose

### w
void w(string msg)

Warn









## MediaSource


> Definition

```javascript
interface MediaSource  {
  getMedia(): MediaObject;
}
```


<%= partial "includes/scrypted/MediaSource.md.erb" %>






### getMedia
<a href='#mediaobject'>MediaObject</a> getMedia()

Get a MediaObject that will be automatically converted for playback on other devices.









## MessagingEndpoint



<%= partial "includes/scrypted/MessagingEndpoint.md.erb" %>










## Settings


> Definition

```javascript
interface Settings  {
  getBoolean(key: string): boolean;
  getBoolean(key: string, defaultValue: boolean): boolean;
  getConfigurationValueList(key: string): string[];
  getDouble(key: string): number;
  getFloat(key: string): number;
  getInt(key: string): number;
  getKeyDescription(key: string): string;
  getKeys(): string[];
  getString(key: string): string;
  putBoolean(key: string, value: boolean): void;
  putDouble(key: string, value: number): void;
  putFloat(key: string, value: number): void;
  putInt(key: string, value: number): void;
  putString(key: string, value: string): void;
}
```


<%= partial "includes/scrypted/Settings.md.erb" %>


<aside class="notice">
Settings viewing and editing of device configurations that describe or modify behavior.
</aside>





### getBoolean
boolean getBoolean(string key)



### getBoolean
boolean getBoolean(string key, boolean defaultValue)



### getConfigurationValueList
string[] getConfigurationValueList(string key)



### getDouble
number getDouble(string key)



### getFloat
number getFloat(string key)



### getInt
number getInt(string key)



### getKeyDescription
string getKeyDescription(string key)



### getKeys
string[] getKeys()



### getString
string getString(string key)



### putBoolean
void putBoolean(string key, boolean value)



### putDouble
void putDouble(string key, number value)



### putFloat
void putFloat(string key, number value)



### putInt
void putInt(string key, number value)



### putString
void putString(string key, string value)











## OauthClient


> Definition

```javascript
interface OauthClient  {
  getOauthUrl(): string;
  onOauthCallback(callbackUrl: string): void;
}
```


<%= partial "includes/scrypted/OauthClient.md.erb" %>


<aside class="notice">
The OauthClient can be implemented to perform the browser based Oauth process from within a plugin.
</aside>





### getOauthUrl
string getOauthUrl()

Get the Oauth URL to navigate to in the browser. The redirect_uri parameter is not needed and will be automatically set by Scrypted.

### onOauthCallback
void onOauthCallback(string callbackUrl)

When an oauth request by a plugin completes, the callback url, with the code/token, will be passed to this method.









## HttpRequestHandler


> Definition

```javascript
interface HttpRequestHandler  {
  getEndpoint(): string;
  onRequest(request: HttpRequest, response: HttpResponse): void;
}
```


<%= partial "includes/scrypted/HttpRequestHandler.md.erb" %>


<aside class="notice">
The HttpRequestHandler allows handling of web requests under the endpoint path: /endpoint/<endpoint>/*.
</aside>





### getEndpoint
string getEndpoint()

Get the preferred endpoint of this HttpRequestHandler. Local/development scripts can set this to any value. This is ignored if the plugin is installed via npm: the endpoint will always be the npm package name.

### onRequest
void onRequest(HttpRequest request, HttpResponse response)

Callback to handle an incoming request.









## HttpRequest


> Definition

```javascript
interface HttpRequest  {
  body: string;
  headers: object;
  method: string;
  rootPath: string;
  url: string;
}
```


<%= partial "includes/scrypted/HttpRequest.md.erb" %>






### Properties
Name      | Type
--------- | ----
body | string
headers | object
method | string
rootPath | string
url | string






## HttpResponse


> Definition

```javascript
interface HttpResponse  {
  send(options: HttpResponseOptions, body: string): void;
  send(options: HttpResponseOptions, body: Buffer): void;
  send(body: string): void;
  send(body: Buffer): void;
}
```


<%= partial "includes/scrypted/HttpResponse.md.erb" %>


<aside class="notice">
Response object provided by the HttpRequestHandler.
</aside>





### send
void send(HttpResponseOptions options, string body)



### send
void send(HttpResponseOptions options, Buffer body)



### send
void send(string body)



### send
void send(Buffer body)











## HttpResponseOptions


> Definition

```javascript
interface HttpResponseOptions  {
  asContent: boolean;
  code: number;
  headers: object;
}
```


<%= partial "includes/scrypted/HttpResponseOptions.md.erb" %>






### Properties
Name      | Type
--------- | ----
asContent | boolean
code | number
headers | object







