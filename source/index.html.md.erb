---
title: Scrypted API Reference

language_tabs: # must be one of https://git.io/vQNgJ
  - typescript
  - javascript

search: true
---
<%= partial "includes/GettingStarted.md.erb" %>

<%= partial "includes/Concepts.md.erb" %>

<%= partial "includes/SDK.md.erb" %>



# Core Reference


## ScryptedDevice


> Definition

```ecmascript
interface ScryptedDevice  {
  component: string;
  id: string;
  interfaces: string[];
  metadata: any;
  name: string;
  room: string;
  type: ScryptedDeviceType;

  listen(event: ScryptedInterface|EventListenerOptions, callback: (eventSource: ScryptedDevice|null, eventDetails: EventDetails, eventData: object) => void): EventListenerRegister;
  setName(name: string): void;
  setRoom(room: string): void;
  setType(type: ScryptedDeviceType): void;
}
```


<%= partial "includes/scrypted/ScryptedDevice.md.erb" %>


<aside class="notice">


All devices in Scrypted implement ScryptedDevice, which contains the id, name, and type. Add listeners to subscribe to events from that device.

</aside>



### Properties
Name      | Type
--------- | ----
component | string
id | string
interfaces | string[]
metadata | any
name | string
room | string
type | ScryptedDeviceType






### listen
<a href='#eventlistenerregister'>EventListenerRegister</a> listen(ScryptedInterface|<a href='#eventlisteneroptions'>EventListenerOptions</a> event, <a href='#eventlistener'>EventListener</a> callback)

Subscribe to events from a specific interface on a device, such as 'OnOff' or 'Brightness'.

### setName
void setName(string name)



### setRoom
void setRoom(string room)



### setType
void setType(ScryptedDeviceType type)









## SystemManager


> Definition

```ecmascript
interface SystemManager  {
  getDeviceById(id: string): ScryptedDevice|null;
  getDeviceByName(name: string): ScryptedDevice|null;
  getDeviceState(id: string): any;
  getSystemState(): any;
  listen(EventListener: (eventSource: ScryptedDevice|null, eventDetails: EventDetails, eventData: object) => void): EventListenerRegister;
}
```


<%= partial "includes/scrypted/SystemManager.md.erb" %>


<aside class="notice">


SystemManager is used by scripts to query device state and access devices.

</aside>







### getDeviceById
ScryptedDevice|null getDeviceById(string id)

Find a Scrypted device by id.

### getDeviceByName
ScryptedDevice|null getDeviceByName(string name)

Find a Scrypted device by name.

### getDeviceState
any getDeviceState(string id)

Get the current state of a device.

### getSystemState
any getSystemState()

Get the current state of every device.

### listen
<a href='#eventlistenerregister'>EventListenerRegister</a> listen(<a href='#eventlistener'>EventListener</a> EventListener)

Passively (without polling) listen to property changed events.







## ScryptedDeviceType


```ecmascript
enum ScryptedDeviceType {
  Builtin = "Builtin",
  Camera = "Camera",
  Fan = "Fan",
  Light = "Light",
  Switch = "Switch",
  Outlet = "Outlet",
  Sensor = "Sensor",
  Scene = "Scene",
  Program = "Program",
  Automation = "Automation",
  Vacuum = "Vacuum",
  Notifier = "Notifier",
  Thermostat = "Thermostat",
  Lock = "Lock",
  PasswordControl = "PasswordControl",
  Display = "Display",
  Speaker = "Speaker",
  Event = "Event",
  Entry = "Entry",
  Garage = "Garage",
  DeviceProvider = "DeviceProvider",
  DataSource = "DataSource",
  API = "API",
  Unknown = "Unknown",
}
```


<%= partial "includes/scrypted/ScryptedDeviceType.md.erb" %>


<aside class="notice">

Used by <a href='#scrypteddevice'>ScryptedDevice</a>.


</aside>







Enum |
----
"Builtin" |
"Camera" |
"Fan" |
"Light" |
"Switch" |
"Outlet" |
"Sensor" |
"Scene" |
"Program" |
"Automation" |
"Vacuum" |
"Notifier" |
"Thermostat" |
"Lock" |
"PasswordControl" |
"Display" |
"Speaker" |
"Event" |
"Entry" |
"Garage" |
"DeviceProvider" |
"DataSource" |
"API" |
"Unknown" |




## EventListener


> Definition

```ecmascript
interface EventListener  {
  onEvent(eventSource: ScryptedDevice|null, eventDetails: EventDetails, eventData: object): void;
}
```


<%= partial "includes/scrypted/EventListener.md.erb" %>








### onEvent
void onEvent(ScryptedDevice|null eventSource, <a href='#eventdetails'>EventDetails</a> eventDetails, object eventData)

This device type can be hooked by Automation actions to handle events. The event source, event details (interface, time, property), and event data are all passed to the listener as arguments.







## EventListenerRegister


> Definition

```ecmascript
interface EventListenerRegister  {
  removeListener(): void;
}
```


<%= partial "includes/scrypted/EventListenerRegister.md.erb" %>


<aside class="notice">

Used by <a href='#scrypteddevice'>ScryptedDevice</a>.


Returned when an event listener is attached to an EventEmitter. Call removeListener to unregister from events.

</aside>







### removeListener
void removeListener()









## Logger


> Definition

```ecmascript
interface Logger  {
  a(msg: string): void;
  clear(): void;
  clearAlert(msg: string): void;
  clearAlerts(): void;
  d(msg: string): void;
  e(msg: string): void;
  i(msg: string): void;
  v(msg: string): void;
  w(msg: string): void;
}
```


<%= partial "includes/scrypted/Logger.md.erb" %>


<aside class="notice">


Logger is exposed via log.* to allow writing to the Scrypted log.

</aside>







### a
void a(string msg)

Alert. Alert level logs will be displayed as a notification in the management console.

### clear
void clear()

Clear the log

### clearAlert
void clearAlert(string msg)

Clear a specific alert

### clearAlerts
void clearAlerts()

Clear all alerts

### d
void d(string msg)

Debug

### e
void e(string msg)

Error

### i
void i(string msg)

Info

### v
void v(string msg)

Verbose

### w
void w(string msg)

Warn










# Device Provider Reference


## DeviceManager


> Definition

```ecmascript
interface DeviceManager  {
  getDeviceLogger(nativeId: string): Logger;
  getDeviceState(): DeviceState;
  getDeviceState(nativeId: string): DeviceState;
  getDeviceStorage(): Storage;
  getDeviceStorage(nativeId: string): Storage;
  getNativeIds(): string[];
  onDeviceDiscovered(device: Device): void;
  onDeviceEvent(eventInterface: string, eventData: any): void;
  onDeviceEvent(nativeId: string, eventInterface: string, eventData: any): void;
  onDevicesChanged(devices: DeviceManifest): void;
}
```


<%= partial "includes/scrypted/DeviceManager.md.erb" %>


<aside class="notice">


DeviceManager is the interface used by DeviceProvider to report new devices, device states, and device events to Scrypted.

</aside>







### getDeviceLogger
<a href='#logger'>Logger</a> getDeviceLogger(string nativeId)

Get the logger for a device given a native id.

### getDeviceState
<a href='#devicestate'>DeviceState</a> getDeviceState()

Get the device state maintained by Scrypted. Setting properties on this state will update the state in Scrypted.

### getDeviceState
<a href='#devicestate'>DeviceState</a> getDeviceState(string nativeId)

Get the device state maintained by Scrypted. Setting properties on this state will update the state in Scrypted.

### getDeviceStorage
Storage getDeviceStorage()

Get the per script Storage object.

### getDeviceStorage
Storage getDeviceStorage(string nativeId)

Get the per device Storage object.

### getNativeIds
string[] getNativeIds()



### onDeviceDiscovered
void onDeviceDiscovered(<a href='#device'>Device</a> device)

onDeviceDiscovered is used to report new devices that are trickle discovered, one by one, such as via a network broadcast.

### onDeviceEvent
void onDeviceEvent(string eventInterface, any eventData)

Fire an event for this plugin's device.

### onDeviceEvent
void onDeviceEvent(string nativeId, string eventInterface, any eventData)

Fire an event for a device provided by this plugin.

### onDevicesChanged
void onDevicesChanged(<a href='#devicemanifest'>DeviceManifest</a> devices)

onDevicesChanged is used to sync Scrypted with devices that are attached to a hub, such as Hue or SmartThings. All the devices should be reported at once.







## DeviceProvider


> Definition

```ecmascript
interface DeviceProvider  {
  discoverDevices(duration: number): void;
  getDevice(nativeId: string): object;
}
```


<%= partial "includes/scrypted/DeviceProvider.md.erb" %>


<aside class="notice">


DeviceProvider acts as a controller/hub and exposes multiple devices to Scrypted Device Manager.

</aside>







### discoverDevices
void discoverDevices(number duration)

Initiate device discovery for the specified duration.

### getDevice
object getDevice(string nativeId)

Get an instance of a previously discovered device that was reported to the device manager.







## DeviceManifest


> Definition

```ecmascript
interface DeviceManifest  {
  devices: Device[];
}
```


<%= partial "includes/scrypted/DeviceManifest.md.erb" %>


<aside class="notice">

Used by <a href='#devicemanager'>DeviceManager</a>.


DeviceManifest is passed to DeviceManager.onDevicesChanged to sync a full list of devices from the controller/hub (Hue, SmartThings, etc)

</aside>



### Properties
Name      | Type
--------- | ----
devices | <a href='#device'>Device</a>[]








## Device


> Definition

```ecmascript
interface Device  {
  interfaces: string[];
  model: string;
  name: string;
  nativeId: string;
  room: string;
  type: ScryptedDeviceType;
}
```


<%= partial "includes/scrypted/Device.md.erb" %>


<aside class="notice">

Used by <a href='#devicemanager'>DeviceManager</a>.


Device objects are created by DeviceProviders when new devices are discover and synced to Scrypted via the DeviceManager.

</aside>



### Properties
Name      | Type
--------- | ----
interfaces | string[]
model | string
name | string
nativeId | string
room | string
type | ScryptedDeviceType








## Refresh


> Definition

```ecmascript
interface Refresh  {
  getRefreshFrequency(): number;
  refresh(refreshInterface: string, userInitiated: boolean): void;
}
```


<%= partial "includes/scrypted/Refresh.md.erb" %>


<aside class="notice">


Refresh indicates that this device has properties that are not automatically updated, and must be periodically refreshed via polling. Device implementations should never implement their own underlying polling algorithm, and instead implement Refresh to allow Scrypted to manage polling intelligently.

</aside>







### getRefreshFrequency
number getRefreshFrequency()

Get the recommended refresh/poll frequency in seconds for this device.

### refresh
void refresh(string refreshInterface, boolean userInitiated)

This method is called by Scrypted when the properties of the device need to be refreshed. When the device has completed the refresh, the appropriate DeviceState properties should be set. The parameters provide the specific interface that needs to be refreshed and whether it was user initiated (via UI or voice).







## DeviceState


> Definition

```ecmascript
interface DeviceState  {
  component: string;
  id: string;
  interfaces: string[];
  metadata: any;
  name: string;
  room: string;
  type: ScryptedDeviceType;
  on: boolean;
  brightness: number;
  colorTemperature: number;
  rgb: ColorRgb;
  hsv: ColorHsv;
  running: boolean;
  paused: boolean;
  docked: boolean;
  temperature: number;
  temperatureUnit: TemperatureUnit;
  humidity: number;
  thermostatAvailableModes: ThermostatMode[];
  thermostatMode: ThermostatMode;
  thermostatSetpoint: number;
  thermostatSetpointHigh: number;
  thermostatSetpointLow: number;
  lockState: LockState;
  entryOpen: boolean;
  batteryLevel: number;
  online: boolean;
  updateAvailable: boolean;
  fromMimeType: string;
  toMimeType: string;
  binaryState: boolean;
  intrusionDetected: boolean;
  motionDetected: boolean;
  occupied: boolean;
  flooded: boolean;
  ultraviolet: number;
  luminance: number;
}
```


<%= partial "includes/scrypted/DeviceState.md.erb" %>


<aside class="notice">


DeviceState is returned by DeviceManager.getDeviceState, and allows getting/setting of a device provided by a DeviceProvider.

</aside>



### Properties
Name      | Type
--------- | ----
component | string
id | string
interfaces | string[]
metadata | any
name | string
room | string
type | ScryptedDeviceType
on | boolean
brightness | number
colorTemperature | number
rgb | <a href='#colorrgb'>ColorRgb</a>
hsv | <a href='#colorhsv'>ColorHsv</a>
running | boolean
paused | boolean
docked | boolean
temperature | number
temperatureUnit | <a href='#temperatureunit'>TemperatureUnit</a>
humidity | number
thermostatAvailableModes | <a href='#thermostatmode'>ThermostatMode</a>[]
thermostatMode | <a href='#thermostatmode'>ThermostatMode</a>
thermostatSetpoint | number
thermostatSetpointHigh | number
thermostatSetpointLow | number
lockState | <a href='#lockstate'>LockState</a>
entryOpen | boolean
batteryLevel | number
online | boolean
updateAvailable | boolean
fromMimeType | string
toMimeType | string
binaryState | boolean
intrusionDetected | boolean
motionDetected | boolean
occupied | boolean
flooded | boolean
ultraviolet | number
luminance | number











# Media Reference


## MediaManager


> Definition

```ecmascript
interface MediaManager  {
  convertMediaObjectToBuffer(mediaObject: MediaObject, toMimeType: string): Promise<Buffer>;
  convertMediaObjectToLocalUrl(mediaObject: MediaObject, toMimeType: string): Promise<string>;
  convertMediaObjectToUrl(mediaObject: MediaObject, toMimeType: string): Promise<string>;
  createFFmpegMediaObject(ffMpegInput: FFMpegInput): MediaObject;
  createMediaObject(data: string|Buffer|Promise<string|Buffer>, mimeType: string): MediaObject;
}
```


<%= partial "includes/scrypted/MediaManager.md.erb" %>








### convertMediaObjectToBuffer
Promise\<Buffer> convertMediaObjectToBuffer(<a href='#mediaobject'>MediaObject</a> mediaObject, string toMimeType)

Convert a media object to a Buffer of the given mime type.

### convertMediaObjectToLocalUrl
Promise\<string> convertMediaObjectToLocalUrl(<a href='#mediaobject'>MediaObject</a> mediaObject, string toMimeType)

Convert a media object to a locally accessible URL that serves a media file of the given mime type. If the media object is an externally accessible URL, that will be returned.

### convertMediaObjectToUrl
Promise\<string> convertMediaObjectToUrl(<a href='#mediaobject'>MediaObject</a> mediaObject, string toMimeType)

Convert a media object to a publically accessible URL that serves a media file of the given mime type.

### createFFmpegMediaObject
<a href='#mediaobject'>MediaObject</a> createFFmpegMediaObject(<a href='#ffmpeginput'>FFMpegInput</a> ffMpegInput)

Create a MediaObject. The media will be created from the provided FFmpeg input arguments.

### createMediaObject
<a href='#mediaobject'>MediaObject</a> createMediaObject(string|Buffer|Promise\<string|Buffer> data, string mimeType)

Create a MediaObject. The mime type needs to be provided up front, but the data can be a URL string, Buffer, or a Promise for a URL string or Buffer.







## MediaObject


> Definition

```ecmascript
interface MediaObject  {
  mimeType: string;
}
```


<%= partial "includes/scrypted/MediaObject.md.erb" %>


<aside class="notice">

Used by <a href='#notifier'>Notifier</a>.


MediaObject is an intermediate object within Scrypted to represent all media objects. Plugins should use the MediaConverter to convert the Scrypted MediaObject into a desired type, whether it is a externally accessible URL, a Buffer, etc.

</aside>



### Properties
Name      | Type
--------- | ----
mimeType | string











# Webhook and Push Reference


## EndpointManager


> Definition

```ecmascript
interface EndpointManager  {
  getAuthenticatedPath(): Promise<string>;
  getInsecurePublicLocalEndpoint(): Promise<string>;
  getPublicCloudEndpoint(): Promise<string>;
  getPublicLocalEndpoint(): Promise<string>;
  getPublicPushEndpoint(): Promise<string>;
}
```


<%= partial "includes/scrypted/EndpointManager.md.erb" %>


<aside class="notice">


EndpointManager provides publicly accessible URLs that can be used to contact your Scrypted Plugin.

</aside>







### getAuthenticatedPath
Promise\<string> getAuthenticatedPath()

Get an URL pathname that can be accessed on your local network or cloud while authenticated. This is an absolute path that requires cookie authentication, and generally used only in browser contexts.

### getInsecurePublicLocalEndpoint
Promise\<string> getInsecurePublicLocalEndpoint()

Get an URL that can only be accessed on your local network by anyone with the link. HTTP requests and responses are without any encryption. Plugin implementation is responsible for authentication.

### getPublicCloudEndpoint
Promise\<string> getPublicCloudEndpoint()

Get an URL that can be externally accessed by anyone with the link. Plugin implementation is responsible for authentication.

### getPublicLocalEndpoint
Promise\<string> getPublicLocalEndpoint()

Get an URL that can only be accessed on your local network by anyone with the link. HTTP requests and responses are over SSL with a self signed certificate. Plugin implementation is responsible for authentication.

### getPublicPushEndpoint
Promise\<string> getPublicPushEndpoint()

Get an URL that can be used to send a push message to the client. This differs from a cloud endpoint, in that, the Plugin does not send a response back. Plugin implementation is responsible for authentication.







## HttpRequestHandler


> Definition

```ecmascript
interface HttpRequestHandler implements EndpointHandler {
  onRequest(request: HttpRequest, response: HttpResponse): void;
}
```


<%= partial "includes/scrypted/HttpRequestHandler.md.erb" %>


<aside class="notice">


The HttpRequestHandler allows handling of web requests under the endpoint path: /endpoint/npm-package-name/*.

</aside>







### onRequest
void onRequest(<a href='#httprequest'>HttpRequest</a> request, <a href='#httpresponse'>HttpResponse</a> response)

Callback to handle an incoming request.







## PushHandler


> Definition

```ecmascript
interface PushHandler implements EndpointHandler {
  onPush(request: HttpRequest): void;
}
```


<%= partial "includes/scrypted/PushHandler.md.erb" %>








### onPush
void onPush(<a href='#httprequest'>HttpRequest</a> request)

Callback to handle an incoming push.







## HttpRequest


> Definition

```ecmascript
interface HttpRequest  {
  body: string;
  headers: object;
  isPublicEndpoint: boolean;
  method: string;
  rootPath: string;
  url: string;
}
```


<%= partial "includes/scrypted/HttpRequest.md.erb" %>


<aside class="notice">

Used by <a href='#httprequesthandler'>HttpRequestHandler</a>.


</aside>



### Properties
Name      | Type
--------- | ----
body | string
headers | object
isPublicEndpoint | boolean
method | string
rootPath | string
url | string








## HttpResponse


> Definition

```ecmascript
interface HttpResponse  {
  send(options: HttpResponseOptions, body: string): void;
  send(options: HttpResponseOptions, body: Buffer): void;
  send(body: string): void;
  send(body: Buffer): void;
  sendFile(options: HttpResponseOptions, path: string): void;
  sendFile(path: string): void;
}
```


<%= partial "includes/scrypted/HttpResponse.md.erb" %>


<aside class="notice">

Used by <a href='#httprequesthandler'>HttpRequestHandler</a>.


Response object provided by the HttpRequestHandler.

</aside>







### send
void send(<a href='#httpresponseoptions'>HttpResponseOptions</a> options, string body)



### send
void send(<a href='#httpresponseoptions'>HttpResponseOptions</a> options, Buffer body)



### send
void send(string body)



### send
void send(Buffer body)



### sendFile
void sendFile(<a href='#httpresponseoptions'>HttpResponseOptions</a> options, string path)



### sendFile
void sendFile(string path)









## HttpResponseOptions


> Definition

```ecmascript
interface HttpResponseOptions  {
  code: number;
  headers: object;
}
```


<%= partial "includes/scrypted/HttpResponseOptions.md.erb" %>


<aside class="notice">

Used by <a href='#httpresponse'>HttpResponse</a>.


</aside>



### Properties
Name      | Type
--------- | ----
code | number
headers | object











# Android Intent Reference


## Android


> Definition

```ecmascript
interface Android  {
  newIntent(): Intent;
  sendBroadcast(intent: Intent): void;
  startActivity(intent: Intent): void;
  startService(intent: Intent): void;
}
```


<%= partial "includes/scrypted/Android.md.erb" %>


<aside class="notice">


Android provides limited access to the Android system, to send Intents to other applications, such as Tasker. See Android SDK documentation for more information.

</aside>







### newIntent
Intent newIntent()

Create a new Intent. Use one of the send methods to send broadcasts, start activities, or start services.

### sendBroadcast
void sendBroadcast(Intent intent)



### startActivity
void startActivity(Intent intent)



### startService
void startService(Intent intent)












# Z-Wave Reference


## ZwaveManager


> Definition

```ecmascript
interface ZwaveManager  {
  getNodeManufacturerName(homeId: number, nodeId: number): string;
  getNodeName(homeId: number, nodeId: number): string;
  getNodeProductName(homeId: number, nodeId: number): string;
  getValue(valueId: ZwaveValueId): string;
  getValueHelp(valueId: ZwaveValueId): string;
  getValueLabel(valueId: ZwaveValueId): string;
  getValueListItems(valueId: ZwaveValueId): string[];
  getValueListValues(valueId: ZwaveValueId): number[];
  getValueUnit(valueId: ZwaveValueId): string;
  refreshValue(valueId: ZwaveValueId): void;
  setNodeName(homeId: number, nodeId: number, name: string): void;
  setValue(valueId: ZwaveValueId, value: string): void;
  setValueRaw(valueId: ZwaveValueId, value: Buffer): void;
}
```


<%= partial "includes/scrypted/ZwaveManager.md.erb" %>








### getNodeManufacturerName
string getNodeManufacturerName(number homeId, number nodeId)



### getNodeName
string getNodeName(number homeId, number nodeId)



### getNodeProductName
string getNodeProductName(number homeId, number nodeId)



### getValue
string getValue(<a href='#zwavevalueid'>ZwaveValueId</a> valueId)



### getValueHelp
string getValueHelp(<a href='#zwavevalueid'>ZwaveValueId</a> valueId)



### getValueLabel
string getValueLabel(<a href='#zwavevalueid'>ZwaveValueId</a> valueId)



### getValueListItems
string[] getValueListItems(<a href='#zwavevalueid'>ZwaveValueId</a> valueId)



### getValueListValues
number[] getValueListValues(<a href='#zwavevalueid'>ZwaveValueId</a> valueId)



### getValueUnit
string getValueUnit(<a href='#zwavevalueid'>ZwaveValueId</a> valueId)



### refreshValue
void refreshValue(<a href='#zwavevalueid'>ZwaveValueId</a> valueId)



### setNodeName
void setNodeName(number homeId, number nodeId, string name)



### setValue
void setValue(<a href='#zwavevalueid'>ZwaveValueId</a> valueId, string value)



### setValueRaw
void setValueRaw(<a href='#zwavevalueid'>ZwaveValueId</a> valueId, Buffer value)









## ZwaveNotification


> Definition

```ecmascript
interface ZwaveNotification  {
  byteData: number;
  event: number;
  type: ZwaveNotificationType;
  valueId: ZwaveValueId;
}
```


<%= partial "includes/scrypted/ZwaveNotification.md.erb" %>




### Properties
Name      | Type
--------- | ----
byteData | number
event | number
type | <a href='#zwavenotificationtype'>ZwaveNotificationType</a>
valueId | <a href='#zwavevalueid'>ZwaveValueId</a>








## ZwaveNotificationType


```ecmascript
enum ZwaveNotificationType {
  Type_ValueAdded = "Type_ValueAdded",
  Type_ValueRemoved = "Type_ValueRemoved",
  Type_ValueChanged = "Type_ValueChanged",
  Type_ValueRefreshed = "Type_ValueRefreshed",
  Type_Group = "Type_Group",
  Type_NodeNew = "Type_NodeNew",
  Type_NodeAdded = "Type_NodeAdded",
  Type_NodeRemoved = "Type_NodeRemoved",
  Type_NodeProtocolInfo = "Type_NodeProtocolInfo",
  Type_NodeNaming = "Type_NodeNaming",
  Type_NodeEvent = "Type_NodeEvent",
  Type_PollingDisabled = "Type_PollingDisabled",
  Type_PollingEnabled = "Type_PollingEnabled",
  Type_SceneEvent = "Type_SceneEvent",
  Type_CreateButton = "Type_CreateButton",
  Type_DeleteButton = "Type_DeleteButton",
  Type_ButtonOn = "Type_ButtonOn",
  Type_ButtonOff = "Type_ButtonOff",
  Type_DriverReady = "Type_DriverReady",
  Type_DriverFailed = "Type_DriverFailed",
  Type_DriverReset = "Type_DriverReset",
  Type_EssentialNodeQueriesComplete = "Type_EssentialNodeQueriesComplete",
  Type_NodeQueriesComplete = "Type_NodeQueriesComplete",
  Type_AwakeNodesQueried = "Type_AwakeNodesQueried",
  Type_AllNodesQueriedSomeDead = "Type_AllNodesQueriedSomeDead",
  Type_AllNodesQueried = "Type_AllNodesQueried",
  Type_Notification = "Type_Notification",
  Type_DriverRemoved = "Type_DriverRemoved",
  Type_ControllerCommand = "Type_ControllerCommand",
  Type_NodeReset = "Type_NodeReset",
  Type_UserAlerts = "Type_UserAlerts",
  Type_ManufacturerSpecificDBReady = "Type_ManufacturerSpecificDBReady",
}
```


<%= partial "includes/scrypted/ZwaveNotificationType.md.erb" %>


<aside class="notice">

Used by <a href='#zwavenotification'>ZwaveNotification</a>.


</aside>







Enum |
----
"Type_ValueAdded" |
"Type_ValueRemoved" |
"Type_ValueChanged" |
"Type_ValueRefreshed" |
"Type_Group" |
"Type_NodeNew" |
"Type_NodeAdded" |
"Type_NodeRemoved" |
"Type_NodeProtocolInfo" |
"Type_NodeNaming" |
"Type_NodeEvent" |
"Type_PollingDisabled" |
"Type_PollingEnabled" |
"Type_SceneEvent" |
"Type_CreateButton" |
"Type_DeleteButton" |
"Type_ButtonOn" |
"Type_ButtonOff" |
"Type_DriverReady" |
"Type_DriverFailed" |
"Type_DriverReset" |
"Type_EssentialNodeQueriesComplete" |
"Type_NodeQueriesComplete" |
"Type_AwakeNodesQueried" |
"Type_AllNodesQueriedSomeDead" |
"Type_AllNodesQueried" |
"Type_Notification" |
"Type_DriverRemoved" |
"Type_ControllerCommand" |
"Type_NodeReset" |
"Type_UserAlerts" |
"Type_ManufacturerSpecificDBReady" |




## ZwaveValueId


> Definition

```ecmascript
interface ZwaveValueId  {
  commandClass: number;
  genre: number;
  homeId: number;
  index: number;
  instance: number;
  nodeId: number;
  type: number;
}
```


<%= partial "includes/scrypted/ZwaveValueId.md.erb" %>


<aside class="notice">

Used by <a href='#zwavemanager'>ZwaveManager</a>.


</aside>



### Properties
Name      | Type
--------- | ----
commandClass | number
genre | number
homeId | number
index | number
instance | number
nodeId | number
type | number











# Device Interface Reference


## EventListenerOptions


> Definition

```ecmascript
interface EventListenerOptions  {
  denoise: boolean;
  event: ScryptedInterface;
  watch: boolean;
}
```


<%= partial "includes/scrypted/EventListenerOptions.md.erb" %>


<aside class="notice">

Used by <a href='#scrypteddevice'>ScryptedDevice</a>.


</aside>



### Properties
Name      | Type
--------- | ----
denoise | boolean
event | ScryptedInterface
watch | boolean








## EventDetails


> Definition

```ecmascript
interface EventDetails  {
  changed: boolean;
  eventInterface: string;
  eventTime: number;
  property: string;
}
```


<%= partial "includes/scrypted/EventDetails.md.erb" %>


<aside class="notice">

Used by <a href='#eventlistener'>EventListener</a>.


</aside>



### Properties
Name      | Type
--------- | ----
changed | boolean
eventInterface | string
eventTime | number
property | string








## OnOff


> Definition

```ecmascript
interface OnOff  {
  on: boolean;

  turnOff(): void;
  turnOn(): void;
}
```


<%= partial "includes/scrypted/OnOff.md.erb" %>


<aside class="notice">


OnOff is a basic binary switch.

</aside>



### Properties
Name      | Type
--------- | ----
on | boolean






### turnOff
void turnOff()



### turnOn
void turnOn()









## Brightness


> Definition

```ecmascript
interface Brightness  {
  brightness: number;

  setBrightness(brightness: number): void;
}
```


<%= partial "includes/scrypted/Brightness.md.erb" %>


<aside class="notice">


Brightness is a lighting device that can be dimmed/lit between 0 to 100.

</aside>



### Properties
Name      | Type
--------- | ----
brightness | number






### setBrightness
void setBrightness(number brightness)









## ColorSettingTemperature


> Definition

```ecmascript
interface ColorSettingTemperature  {
  colorTemperature: number;

  getTemperatureMaxK(): number;
  getTemperatureMinK(): number;
  setColorTemperature(kelvin: number): void;
}
```


<%= partial "includes/scrypted/ColorSettingTemperature.md.erb" %>


<aside class="notice">


ColorSettingTemperature sets the color temperature of a light in Kelvin.

</aside>



### Properties
Name      | Type
--------- | ----
colorTemperature | number






### getTemperatureMaxK
number getTemperatureMaxK()



### getTemperatureMinK
number getTemperatureMinK()



### setColorTemperature
void setColorTemperature(number kelvin)









## ColorSettingRgb


> Definition

```ecmascript
interface ColorSettingRgb  {
  rgb: ColorRgb;

  setRgb(r: number, g: number, b: number): void;
}
```


<%= partial "includes/scrypted/ColorSettingRgb.md.erb" %>


<aside class="notice">


ColorSettingRgb sets the color of a colored light using the RGB representation.

</aside>



### Properties
Name      | Type
--------- | ----
rgb | <a href='#colorrgb'>ColorRgb</a>






### setRgb
void setRgb(number r, number g, number b)









## ColorRgb


> Definition

```ecmascript
interface ColorRgb  {
  b: number;
  g: number;
  r: number;
}
```


<%= partial "includes/scrypted/ColorRgb.md.erb" %>


<aside class="notice">

Used by <a href='#colorsettingrgb'>ColorSettingRgb</a>.


Represents an RGB color with component values between 0 and 255.

</aside>



### Properties
Name      | Type
--------- | ----
b | number
g | number
r | number








## ColorSettingHsv


> Definition

```ecmascript
interface ColorSettingHsv  {
  hsv: ColorHsv;

  setHsv(hue: number, saturation: number, value: number): void;
}
```


<%= partial "includes/scrypted/ColorSettingHsv.md.erb" %>


<aside class="notice">


ColorSettingHsv sets the color of a colored light using the HSV representation.

</aside>



### Properties
Name      | Type
--------- | ----
hsv | <a href='#colorhsv'>ColorHsv</a>






### setHsv
void setHsv(number hue, number saturation, number value)









## ColorHsv


> Definition

```ecmascript
interface ColorHsv  {
  h: number;
  s: number;
  v: number;
}
```


<%= partial "includes/scrypted/ColorHsv.md.erb" %>


<aside class="notice">

Used by <a href='#colorsettinghsv'>ColorSettingHsv</a>.


Represents an HSV color value component.

</aside>



### Properties
Name      | Type
--------- | ----
h | number
s | number
v | number








## Notifier


> Definition

```ecmascript
interface Notifier  {
  sendNotification(title: string, body: string, media: URL|MediaObject, mimeType: string): void;
}
```


<%= partial "includes/scrypted/Notifier.md.erb" %>


<aside class="notice">


Notifier can be any endpoint that can receive messages, such as speakers, phone numbers, messaging clients, etc. The messages may optionally contain media.

</aside>







### sendNotification
void sendNotification(string title, string body, URL|<a href='#mediaobject'>MediaObject</a> media, string mimeType)

If a the media parameter is supplied, the mime type denotes how to send the media within notification. For example, specify 'image/*' to send a video MediaObject as an image.
Passing null uses the native type of the MediaObject. If that is not supported by the notifier, the media will be converted to a compatible type.







## StartStop


> Definition

```ecmascript
interface StartStop  {
  running: boolean;

  start(): void;
  stop(): void;
}
```


<%= partial "includes/scrypted/StartStop.md.erb" %>


<aside class="notice">


StartStop represents a device that can be started, stopped, and possibly paused and resumed. Typically vacuum cleaners or washers.

</aside>



### Properties
Name      | Type
--------- | ----
running | boolean






### start
void start()



### stop
void stop()









## Pause


> Definition

```ecmascript
interface Pause  {
  paused: boolean;

  pause(): void;
  resume(): void;
}
```


<%= partial "includes/scrypted/Pause.md.erb" %>




### Properties
Name      | Type
--------- | ----
paused | boolean






### pause
void pause()



### resume
void resume()









## Dock


> Definition

```ecmascript
interface Dock  {
  docked: boolean;

  dock(): void;
}
```


<%= partial "includes/scrypted/Dock.md.erb" %>


<aside class="notice">


Dock instructs devices that have a base station or charger, to return to their home.

</aside>



### Properties
Name      | Type
--------- | ----
docked | boolean






### dock
void dock()









## TemperatureSetting


> Definition

```ecmascript
interface TemperatureSetting implements Thermometer, HumiditySensor {
  thermostatAvailableModes: ThermostatMode[];
  thermostatMode: ThermostatMode;
  thermostatSetpoint: number;
  thermostatSetpointHigh: number;
  thermostatSetpointLow: number;

  setThermostatMode(mode: ThermostatMode): void;
  setThermostatSetpoint(degrees: number): void;
  setThermostatSetpointHigh(high: number): void;
  setThermostatSetpointLow(low: number): void;
}
```


<%= partial "includes/scrypted/TemperatureSetting.md.erb" %>


<aside class="notice">


TemperatureSetting represents a thermostat device.

</aside>



### Properties
Name      | Type
--------- | ----
thermostatAvailableModes | <a href='#thermostatmode'>ThermostatMode</a>[]
thermostatMode | <a href='#thermostatmode'>ThermostatMode</a>
thermostatSetpoint | number
thermostatSetpointHigh | number
thermostatSetpointLow | number






### setThermostatMode
void setThermostatMode(<a href='#thermostatmode'>ThermostatMode</a> mode)



### setThermostatSetpoint
void setThermostatSetpoint(number degrees)



### setThermostatSetpointHigh
void setThermostatSetpointHigh(number high)



### setThermostatSetpointLow
void setThermostatSetpointLow(number low)









## Thermometer


> Definition

```ecmascript
interface Thermometer  {
  temperature: number;
  temperatureUnit: TemperatureUnit;
}
```


<%= partial "includes/scrypted/Thermometer.md.erb" %>




### Properties
Name      | Type
--------- | ----
temperature | number
temperatureUnit | <a href='#temperatureunit'>TemperatureUnit</a>








## TemperatureUnit


```ecmascript
enum TemperatureUnit {
  C = "C",
  F = "F",
}
```


<%= partial "includes/scrypted/TemperatureUnit.md.erb" %>


<aside class="notice">

Used by <a href='#thermometer'>Thermometer</a>.


</aside>







Enum |
----
"C" |
"F" |




## HumiditySensor


> Definition

```ecmascript
interface HumiditySensor  {
  humidity: number;
}
```


<%= partial "includes/scrypted/HumiditySensor.md.erb" %>




### Properties
Name      | Type
--------- | ----
humidity | number








## ThermostatMode


```ecmascript
enum ThermostatMode {
  Off = "Off",
  Cool = "Cool",
  Heat = "Heat",
  HeatCool = "HeatCool",
  Auto = "Auto",
  FanOnly = "FanOnly",
  Purifier = "Purifier",
  Eco = "Eco",
  Dry = "Dry",
  On = "On",
}
```


<%= partial "includes/scrypted/ThermostatMode.md.erb" %>


<aside class="notice">

Used by <a href='#temperaturesetting'>TemperatureSetting</a>.


</aside>







Enum |
----
"Off" |
"Cool" |
"Heat" |
"HeatCool" |
"Auto" |
"FanOnly" |
"Purifier" |
"Eco" |
"Dry" |
"On" |




## Camera


> Definition

```ecmascript
interface Camera  {
  takePicture(): MediaObject;
}
```


<%= partial "includes/scrypted/Camera.md.erb" %>


<aside class="notice">


Camera devices can take still photos.

</aside>







### takePicture
<a href='#mediaobject'>MediaObject</a> takePicture()









## VideoCamera


> Definition

```ecmascript
interface VideoCamera  {
  getVideoStream(): MediaObject;
}
```


<%= partial "includes/scrypted/VideoCamera.md.erb" %>


<aside class="notice">


VideoCamera devices can capture video streams.

</aside>







### getVideoStream
<a href='#mediaobject'>MediaObject</a> getVideoStream()









## Lock


> Definition

```ecmascript
interface Lock  {
  lockState: LockState;

  lock(): void;
  unlock(): void;
}
```


<%= partial "includes/scrypted/Lock.md.erb" %>


<aside class="notice">


Lock controls devices that can lock or unlock entries. Often works in tandem with PasswordControl.

</aside>



### Properties
Name      | Type
--------- | ----
lockState | <a href='#lockstate'>LockState</a>






### lock
void lock()



### unlock
void unlock()









## LockState


```ecmascript
enum LockState {
  Locked = "Locked",
  Unlocked = "Unlocked",
  Jammed = "Jammed",
}
```


<%= partial "includes/scrypted/LockState.md.erb" %>


<aside class="notice">

Used by <a href='#lock'>Lock</a>.


</aside>







Enum |
----
"Locked" |
"Unlocked" |
"Jammed" |




## PasswordStore


> Definition

```ecmascript
interface PasswordStore implements Authenticator {
  addPassword(password: string): void;
  getPasswords(): string[];
  removePassword(password: string): void;
}
```


<%= partial "includes/scrypted/PasswordStore.md.erb" %>


<aside class="notice">


PasswordControl represents devices that authorize users via a passcode or pin code.

</aside>







### addPassword
void addPassword(string password)



### getPasswords
string[] getPasswords()



### removePassword
void removePassword(string password)









## Authenticator


> Definition

```ecmascript
interface Authenticator  {
  checkPassword(password: string): boolean;
}
```


<%= partial "includes/scrypted/Authenticator.md.erb" %>


<aside class="notice">


Authenticator can be used to require a password before allowing interaction with a security device.

</aside>







### checkPassword
boolean checkPassword(string password)









## Scene


> Definition

```ecmascript
interface Scene  {
  activate(): void;
  deactivate(): void;
  isReversible(): boolean;
}
```


<%= partial "includes/scrypted/Scene.md.erb" %>


<aside class="notice">


Scenes control multiple different devices into a given state.

</aside>







### activate
void activate()



### deactivate
void deactivate()



### isReversible
boolean isReversible()

If a scene can be reversed, isReversible should return true. Otherwise deactivate will not be called.







## Entry


> Definition

```ecmascript
interface Entry implements EntrySensor {
  closeEntry(): void;
  openEntry(): void;
}
```


<%= partial "includes/scrypted/Entry.md.erb" %>


<aside class="notice">


Entry represents devices that can open and close barriers, such as garage doors.

</aside>







### closeEntry
void closeEntry()



### openEntry
void openEntry()









## EntrySensor


> Definition

```ecmascript
interface EntrySensor  {
  entryOpen: boolean;
}
```


<%= partial "includes/scrypted/EntrySensor.md.erb" %>




### Properties
Name      | Type
--------- | ----
entryOpen | boolean








## Battery


> Definition

```ecmascript
interface Battery  {
  batteryLevel: number;
}
```


<%= partial "includes/scrypted/Battery.md.erb" %>


<aside class="notice">


Battery retrieves the battery level of battery powered devices.

</aside>



### Properties
Name      | Type
--------- | ----
batteryLevel | number








## MediaPlayer


> Definition

```ecmascript
interface MediaPlayer  {
  load(media: URL|MediaObject, options: MediaPlayerOptions): void;
  pause(): void;
  play(): void;
  stop(): void;
}
```


<%= partial "includes/scrypted/MediaPlayer.md.erb" %>


<aside class="notice">


MediaPlayer allows media playback on screen or speaker devices, such as Chromecasts or TVs.

</aside>







### load
void load(URL|<a href='#mediaobject'>MediaObject</a> media, <a href='#mediaplayeroptions'>MediaPlayerOptions</a> options)



### pause
void pause()



### play
void play()



### stop
void stop()









## MediaPlayerOptions


> Definition

```ecmascript
interface MediaPlayerOptions  {
  autoplay: boolean;
  mimeType: string;
}
```


<%= partial "includes/scrypted/MediaPlayerOptions.md.erb" %>


<aside class="notice">

Used by <a href='#mediaplayer'>MediaPlayer</a>.


</aside>



### Properties
Name      | Type
--------- | ----
autoplay | boolean
mimeType | string








## Online


> Definition

```ecmascript
interface Online  {
  online: boolean;
}
```


<%= partial "includes/scrypted/Online.md.erb" %>


<aside class="notice">


Online denotes whether the device is online or unresponsive. It may be unresponsive due to being unplugged, network error, etc.

</aside>



### Properties
Name      | Type
--------- | ----
online | boolean








## Program


> Definition

```ecmascript
interface Program  {
  run(args: object[]): Promise<object>;
}
```


<%= partial "includes/scrypted/Program.md.erb" %>








### run
Promise\<object> run(object[] args)

Asynchronously run a script given the provided arguments.







## SoftwareUpdate


> Definition

```ecmascript
interface SoftwareUpdate  {
  updateAvailable: boolean;

  checkForUpdate(): void;
  installUpdate(): void;
}
```


<%= partial "includes/scrypted/SoftwareUpdate.md.erb" %>


<aside class="notice">


SoftwareUpdate provides a way to check for updates and install them. This may be a Scrypted Plugin or device firmware.

</aside>



### Properties
Name      | Type
--------- | ----
updateAvailable | boolean






### checkForUpdate
void checkForUpdate()



### installUpdate
void installUpdate()









## BufferConverter


> Definition

```ecmascript
interface BufferConverter  {
  fromMimeType: string;
  toMimeType: string;

  convert(buffer: Buffer, fromMimeType: string): Promise<Buffer>;
}
```


<%= partial "includes/scrypted/BufferConverter.md.erb" %>


<aside class="notice">


Add a converter to be used by Scrypted to convert buffers from one mime type to another mime type.

</aside>



### Properties
Name      | Type
--------- | ----
fromMimeType | string
toMimeType | string






### convert
Promise\<Buffer> convert(Buffer buffer, string fromMimeType)









## Settings


> Definition

```ecmascript
interface Settings  {
  getSettings(): Setting[];
  putSetting(key: string, value: boolean|number|string): void;
}
```


<%= partial "includes/scrypted/Settings.md.erb" %>


<aside class="notice">


Settings viewing and editing of device configurations that describe or modify behavior.

</aside>







### getSettings
<a href='#setting'>Setting</a>[] getSettings()



### putSetting
void putSetting(string key, boolean|number|string value)









## Setting


> Definition

```ecmascript
interface Setting  {
  choices: string[];
  description: string;
  key: string;
  placeholder: string;
  readonly: boolean;
  title: string;
  type: string;
  value: boolean|number|string;
}
```


<%= partial "includes/scrypted/Setting.md.erb" %>


<aside class="notice">

Used by <a href='#settings'>Settings</a>.


</aside>



### Properties
Name      | Type
--------- | ----
choices | string[]
description | string
key | string
placeholder | string
readonly | boolean
title | string
type | string
value | boolean|number|string








## BinarySensor


> Definition

```ecmascript
interface BinarySensor  {
  binaryState: boolean;
}
```


<%= partial "includes/scrypted/BinarySensor.md.erb" %>




### Properties
Name      | Type
--------- | ----
binaryState | boolean








## IntrusionSensor


> Definition

```ecmascript
interface IntrusionSensor  {
  intrusionDetected: boolean;
}
```


<%= partial "includes/scrypted/IntrusionSensor.md.erb" %>




### Properties
Name      | Type
--------- | ----
intrusionDetected | boolean








## AudioSensor



<%= partial "includes/scrypted/AudioSensor.md.erb" %>










## MotionSensor


> Definition

```ecmascript
interface MotionSensor  {
  motionDetected: boolean;
}
```


<%= partial "includes/scrypted/MotionSensor.md.erb" %>




### Properties
Name      | Type
--------- | ----
motionDetected | boolean








## OccupancySensor


> Definition

```ecmascript
interface OccupancySensor  {
  occupied: boolean;
}
```


<%= partial "includes/scrypted/OccupancySensor.md.erb" %>




### Properties
Name      | Type
--------- | ----
occupied | boolean








## FloodSensor


> Definition

```ecmascript
interface FloodSensor  {
  flooded: boolean;
}
```


<%= partial "includes/scrypted/FloodSensor.md.erb" %>




### Properties
Name      | Type
--------- | ----
flooded | boolean








## UltravioletSensor


> Definition

```ecmascript
interface UltravioletSensor  {
  ultraviolet: number;
}
```


<%= partial "includes/scrypted/UltravioletSensor.md.erb" %>




### Properties
Name      | Type
--------- | ----
ultraviolet | number








## LuminanceSensor


> Definition

```ecmascript
interface LuminanceSensor  {
  luminance: number;
}
```


<%= partial "includes/scrypted/LuminanceSensor.md.erb" %>




### Properties
Name      | Type
--------- | ----
luminance | number








## MediaSource


> Definition

```ecmascript
interface MediaSource  {
  getMedia(): MediaObject;
}
```


<%= partial "includes/scrypted/MediaSource.md.erb" %>








### getMedia
<a href='#mediaobject'>MediaObject</a> getMedia()

Get a MediaObject that will be automatically converted for playback on other devices.







## MessagingEndpoint



<%= partial "includes/scrypted/MessagingEndpoint.md.erb" %>










## OauthClient


> Definition

```ecmascript
interface OauthClient  {
  getOauthUrl(): string;
  onOauthCallback(callbackUrl: string): void;
}
```


<%= partial "includes/scrypted/OauthClient.md.erb" %>


<aside class="notice">


The OauthClient can be implemented to perform the browser based Oauth process from within a plugin.

</aside>







### getOauthUrl
string getOauthUrl()

Get the Oauth URL to navigate to in the browser. The redirect_uri parameter is not needed and will be automatically set by Scrypted.

### onOauthCallback
void onOauthCallback(string callbackUrl)

When an oauth request by a plugin completes, the callback url, with the code/token, will be passed to this method.







## FFMpegInput


> Definition

```ecmascript
interface FFMpegInput  {
  inputArguments: string[];
}
```


<%= partial "includes/scrypted/FFMpegInput.md.erb" %>


<aside class="notice">

Used by <a href='#mediamanager'>MediaManager</a>.


</aside>



### Properties
Name      | Type
--------- | ----
inputArguments | string[]








## EndpointHandler


> Definition

```ecmascript
interface EndpointHandler  {
  getEndpoint(): string;
}
```


<%= partial "includes/scrypted/EndpointHandler.md.erb" %>


<aside class="notice">

Used by <a href='#httprequesthandler'>HttpRequestHandler</a>.


</aside>







### getEndpoint
string getEndpoint()

Get the preferred endpoint of this HTTP/Push/EngineIO handler. Local/development scripts can set this to any value. This is ignored if the plugin is installed via npm: the endpoint will always be the npm package name.







## EngineIOHandler


> Definition

```ecmascript
interface EngineIOHandler implements EndpointHandler {
  onConnection(request: HttpRequest, webSocketUrl: string): void;
}
```


<%= partial "includes/scrypted/EngineIOHandler.md.erb" %>








### onConnection
void onConnection(<a href='#httprequest'>HttpRequest</a> request, string webSocketUrl)










