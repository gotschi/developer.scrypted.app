> Example

```transpilescript
import { OnOff, ScryptedDeviceBase, DeviceProvider, ScryptedDeviceType } from '@scrypted/sdk';
import sdk from '@scrypted/sdk';
const { deviceManager } = sdk;

// Devices returned by the DeviceProvider
class ExampleDevice extends ScryptedDeviceBase implements OnOff {
    constructor(nativeId: string) {
        super(nativeId);
        // Ensure the light state is not null.
        this.on = this.on || false;
    }
    turnOff() {
        this.on = false;
    }
    turnOn() {
        this.on = true;
    }
}

// DeviceProvider handles discovery and device requests
class ExampleDeviceProvider extends ScryptedDeviceBase implements DeviceProvider {
    constructor() {
        super();
        // it is recommended to automatically perform discovery on startup
        this.discoverDevices(30);
    }
    discoverDevices(duration: number): void {
        // Sync the following two lights with Scrypted. New devices unknown to Scrypted will be added
        // while devices that were previously reported, and no longer exist, will be removed.
        // onDevicesChanged should be called with the full sync list of devices.
        deviceManager.onDevicesChanged({
            devices:[
                {
                    nativeId: '1',
                    name: 'Light 1',
                    type: ScryptedDeviceType.Light,
                    interfaces: ['OnOff', 'Brightness', 'ColorSettingHsv'],
                },
                {
                    nativeId: '2',
                    name: 'Light 2',
                    type: ScryptedDeviceType.Light,
                    interfaces: ['OnOff', 'Brightness', 'ColorSettingHsv'],
                }
            ]
        });
    }
    getDevice(nativeId: string): object {
        return new ExampleDevice(nativeId);
    }
};

export default new ExampleDeviceProvider();
```