# Getting Started <br/>

## Creating a Script

> Toggle a light

```javascript
if (light.isOn()) {
    light.turnOff();
}
else {
    light.turnOn();
}
```

Scripts are small JavaScript programs that run on Scrypted to extend or create new capabilities in your home automation setup.

A common example would be to write a script that controls your devices in reaction to a automation event.
This script, for example, will toggle a light.

1. Create a new Script under Plugins.
2. Set the type to Library.
3. Assign a device that supports OnOff to a variable "light".
4. Paste the code into the script text box.
5. Run the example code using the "Test" button.


## Creating a Device Script

> Create a new light

```javascript
log.i('Hello World. This will create a virtual OnOff device.');

function Device() {
    this._isOn = false;
}

Device.prototype.isOn = function () {
    log.i('isOn was called!');
    return this._isOn;
};

Device.prototype.turnOff = function () {
    log.i('turnOff was called!');
    this._isOn = false;
};

Device.prototype.turnOn = function () {
    log.i('turnOn was called!');
    this._isOn = true;
};

exports.default = new Device();
```

Scripts can also be used to add support for new devices, like a wifi lightbulb. These new devices will
be synced to upstream integration providers, such as Google Home or Apple Homekit.

This sample creates a simple OnOff device that outputs on and off clicks to the log.

1. Create a new Script under Plugins.
2. Set the type to Device.
3. Select the OnOff interface.
4. Paste the code into the script text box.
4. Save.

Watch the logs for the new light and turn the light on and off using the button on the webpage.

## Using npm and VS Code

> src/main

```javascript
import axios from 'axios';
import sdk from "@scrypted/sdk";
const { log } = sdk;
log.i('Hello World. This will create a virtual OnOff device.');

class Device {
    constructor() {
        this._isOn = false;
    }
    isOn() {
        return this._isOn;
    }
    turnOff() {
        // set a breakpoint here.
        log.i('turnOff was called!');
        this._isOn = false;
    }
    async turnOn() {
        // set a breakpoint here.
        log.i('turnOn was called!');
        log.i("Let's pretend to perform a web request on an API that would turn on a light.");
        const ip = await axios.get('http://jsonip.com');
        log.i('my ip: ' + ip.data.ip);
        this._isOn = true;
    }
}

export default new Device();
```


```typescript
import axios from 'axios';
import { OnOff } from '@scrypted/sdk';
import sdk from '@scrypted/sdk';
const { log } = sdk;
log.i('Hello World. This will create a virtual OnOff device.');

class Device implements OnOff {
    _isOn: boolean;
    constructor() {
        this._isOn = false;
    }
    isOn(): boolean {
        return this._isOn;
    }
    turnOff(): void {
        log.i('turnOff was called!');
        this._isOn = false;
    }
    async turnOn(): Promise<void> {
        // set a breakpoint here.
        log.i('turnOn was called!');
        log.i("Let's pretend to perform a web request on an API that would turn on a light.");
        const ip = await axios.get('http://jsonip.com');
        log.i('my ip: ' + ip.data.ip);
        this._isOn = true;
    }
}

export default new Device();
```

Writing scripts in browser window can quickly become unwieldy when trying as your program becomes more complex.
While devices can be controlled and simple devices can be written in the Scrypted Management console, using the VS Code development
environment is recommended.
Using VS Code enables usage of the latest version of JavaScript, attaching a debugger to the script, and importing common libraries from npm.

<aside class="warning">Download and install <a target='vscode' href='https://code.visualstudio.com/'>Visual Studio Code</a> and the <a target='vscode' href='https://marketplace.visualstudio.com/items?itemName=koush.duk-debug'>Duktape Debugger Plugin</a>.</aside>

1. Install VS Code and the Duktape Debugger Plugin.
2. Check out either the sample <a target='vscode' href='https://github.com/koush/scrypted-vscode'>JavaScript</a> or <a target='vscode' href='https://github.com/koush/scrypted-vscode-typescript'>TypeScript</a> project from Github.
3. Create a new Script (or reuse the previous one)
4. Click Debug. Note the IP.
5. Edit `.vscode/settings.json` and enter the IP in the `"scrypted.debugHost"` value.
6. Launch Scrypted Debugger from the VS Code launch menu (or use the hotkey, F5).

### package.json

You may have noticed that you didn't need to specify the OnOff interface. This is because the package.json
contains the information about the device implementation in the `"scrypted"` key.

> package.json

```json
"scrypted": {
    "name": "JavaScript Light",
    "type": "Device",
    "interfaces": [
       "OnOff"
    ]
 },
```

## Scripts vs Plugins

Plugins are just scripts that have been published for anyone to download. They're distributed, installed, and updated
through the Scrypted Management console and can not be edited.
If you have a script that you want to share, you would publish it through npm, and it would be available for anyone
to use as a plugin.