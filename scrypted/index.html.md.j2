---
title: Scrypted API Reference

language_tabs: # must be one of https://git.io/vQNgJ
  - javascript
  - typescript

search: true
---
# Getting Started <br/>

## Controlling a Device

1. Create a new Script under Plugins.
2. Set the type to Library.
3. Assign an device that supports OnOff to a variable "switch".
4. Run the example code using the "Test" button.

```javascript
if (switch.isOn()) {
    switch.turnOff();
}
else {
    switch.turnOn();
}
```

## Creating a Device

<aside class="warning">To use npm modules, you must have Visual Studio Code and the <a href='https://marketplace.visualstudio.com/items?itemName=koush.duk-debug'>Duktape Debugger Plugin</a> installed.</aside>

```javascript
import axios from 'axios';

log.i('Hello World. This will create a virtual OnOff device.');

function Device() {
    this._isOn = false;
}

Device.prototype.isOn = function () {
    log.i('isOn was called!');
    return this._isOn;
};

Device.prototype.turnOff = function () {
    // set a breakpoint here.
    this._isOn = false;
    log.i('turnOff was called!');
};

Device.prototype.turnOn = async function () {
    // set a breakpoint here.
    log.i('turnOn was called!');

    // turnOn must return immediately, but it can trigger other things... 
    log.i('XMLHttpRequest is polyfilled by the Android host.');
    log.i('This allows the popular http library axios to work.');
    const ip = await axios.get('http://jsonip.com');
    log.i(`my ip: ${ip.data.ip}`);

    this._isOn = true;
};

export default = new Device();
```

This sample creates a simple OnOff device that retrieves your IP when the On button is clicked. This virtual device will
be synced to upstream integration providers, such as Google Home or Apple Homekit.

1. Create a new Script under Plugins.
2. Set the type to Device.
3. Select/check the OnOff interface.
4. Save.
5. Click the Debug button. Note the IP address.
6. Check out the <a href='https://github.com/koush/scrypted-vscode'>sample project</a> and open it in Visual Studio Code.
7. Edit .vcode/settings.json and enter the previous IP address `"scrypted.debugHost": "<ip-address>"`
8. Launch Scrypted Debugger in Visual Studio Code.

# Reference

{% for name, c in classes %}
## {{name}}

<%= partial "includes/scrypted/{{name}}.md.erb" %>

{% if c.methods.length %}
> Definition

```javascript
interface {{ name }} {
{% for method in c.methods %}  {{ method.name }}({{ mapMethodArguments(method.arguments) | join(', ') }}): {{ mapType(method.type) }};
{% endfor %}}
```
{% endif %}

{% if c.description %}
<aside class="notice">
{{ c.description }}
</aside>
{% endif %}

{% if c.methods.length %}
{% if true %}
{% for method in c.methods %}
### {{ method.name }}
{{ linkifyType(method.type) }} {{ method.name }}({{ methodArguments(method.arguments) | join(', ') }})

{{ method.description }}
{% endfor %}
{% endif %}
{% endif %}

{% if c.fields.length %}
### Properties
Name      | Type
--------- | ----
{% for property in c.fields %}{{ property.name }} | {{ linkifyType(property.type) }}
{% endfor %}
{% endif %}

{% if c.values.length %}
Enum |
----
{% for value in c.values %}"{{ value }}" |
{% endfor %}
{% endif %}

{% endfor %}
