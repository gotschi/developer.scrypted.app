{%- for name, c in classes -%}
{%- if c.values.length %}
export enum {{ name }} {
{%- for value in c.values %}
  {{ value }} = "{{ value }}",
{%- endfor %}
}
{%- else -%}
{%- if c.description %}
/**
 * {{ c.description }}
 */
 {%- endif -%}
{%- if c.methods.length %}
export interface {{ name }}
{%- if c.superclass.length %} extends {{ mapSupers(c.superclass) }}
{%- endif %} {
{%- for method in c.methods %}
  {% if method.description -%}
  /**
   * {{ method.description }}
   */
  {% endif -%}
  {{ method.name }}({{ mapMethodArguments(method.arguments) | join(', ') }}): {{ mapType(method.type) }};
{%- endfor %}
}
{%- elif c.fields.length %}
export interface {{ name }} {
{%- for field in c.fields %}
  {{ field.name }}: {{ mapType(field.type) }},
{%- endfor %}
}
{%- else %}
export interface {{ name }} {
}
{%- endif -%}
{%- endif -%}
{%- endfor %}

export interface ScryptedStatic {
    deviceManager: DeviceManager,
    scriptSettings: Settings,
    log: Logger,
    /**
     * Create a MediaObject. The mime type needs to be provided up front, but the data can be a string, Buffer, or a Promise
     * to a string or Buffer.
     * @param mimeType The mime type of the media. May be a wildcard, such as image/*.
     * @param data  The media data. Currently A uri string or a Buffer.
     */
    createMediaObject(mimeType: string, data: string|Buffer|Promise<string|Buffer>): MediaObject;
}

declare const Scrypted: ScryptedStatic;

export default Scrypted;
