{%- for name, c in classes -%}
{%- if c.values.length %}
export enum {{ name }} {
{%- for value in c.values %}
  {{ value }} = "{{ value }}",
{%- endfor %}
}
{%- else -%}
{%- if c.description %}
/**
 * {{ c.description }}
 */
 {%- endif -%}
{%- if c.methods.length or c.fields.length %}
export interface {{ name }}
{%- if c.superclass.length %} extends {{ mapSupers(c.superclass) }}
{%- endif %} {
{%- for method in c.methods %}
  {% if method.description -%}
  /**
   * {{ method.description }}
   */
  {% endif -%}
  {{ method.name }}({{ mapMethodArguments(method.arguments) | join(', ') }}): {{ mapType(method) }};
{% endfor %}

{%- for field in c.fields %}
  {% if field.description -%}
  /**
   * {{ field.description }}
   */
  {% endif -%}  {{ field.name }}?: {{ mapType(field) }};
{%- endfor %}
}
{%- else %}
export interface {{ name }} {
}
{%- endif -%}
{%- endif -%}
{%- endfor %}

export enum ScryptedInterface {
  {%- for name, c in classes -%}
  {%- if c.implementable %}
  {{ name }} = "{{ name }}",
  {%- endif %}
  {%- endfor %}
}

export enum ScryptedInterfaceProperty {
  {%- for name, c in classes -%}
  {%- if c.implementable %}
    {%- for f in c.fields %}
    {{ f.name }} = "{{ f.name }}",
    {%- endfor %}
  {%- endif %}
  {%- endfor %}
}

export interface RTCAVMessage {
  id: string;
  description: RTCSessionDescriptionInit;
  candidates: RTCIceCandidateInit[];
  configuration: RTCConfiguration;
}

export enum ScryptedMimeTypes {
  AcceptUrlParameter = 'accept-url',
  Url = 'text/x-uri',
  InsecureLocalUrl = 'text/x-insecure-local-uri',
  LocalUrl = 'text/x-local-uri',
  FFmpegInput = 'x-scrypted/x-ffmpeg-input',
  RTCAVOffer = 'x-scrypted/x-rtc-av-offer',
  RTCAVAnswer = 'x-scrypted/x-rtc-av-answer',
}

{% include 'sdk.d.ts' %}

